<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
 <mapper namespace="adrankSellRecipeRankingDAO">
 
 	<!-- 매일 정해진 시각에 등록 Scheduler 사용 -->
 	<insert id="insertRankSellRecipeRanking">
 		<![CDATA[
 			INSERT INTO rank_sell_recipe_ranking (recipe_no, recipe_nm, recipe_sell_sum, rank_no, rank_ymd)
			SELECT recipe_no, recipe_nm, COUNT(recipe_no) AS recipe_sell_sum, 0, now()
			FROM order_ingredient
			GROUP BY recipe_no
			ORDER BY recipe_sell_sum DESC, recipe_no
			LIMIT 100
 		]]>
 	</insert>
 	
 	<!-- 등록된 자료에 순위를 업데이트 -->
 	
 	<!-- 나중에 recipe_nm을 no로 변경할 것! -->

 	<update id="updateRankSellRecipeRanking">
 		<![CDATA[
 			UPDATE rank_sell_recipe_ranking
 			SET rank_no = #{rank_no}
 			WHERE recipe_nm = #{recipe_nm}
 		]]>
 	</update>
 	
 	
 	<select id="getRankSellRecipeRankingCnt" resultType="int">
		<![CDATA[
 			SELECT COUNT(*)
 			FROM rank_sell_recipe_ranking
 			WHERE rank_ymd = curdate()
 		]]>
	</select> 	
 	
 	<!-- 순위 업데이트를 위해 100개를 불러옴 -->
 	<select id="getRecipeRankList" resultType="adrankSellRecipe">
 	 	<![CDATA[
 			SELECT recipe_nm, rank_no
 			FROM rank_sell_recipe_ranking
 			WHERE rank_ymd = curdate()
 			ORDER BY recipe_sell_sum DESC
 			LIMIT 100
 		]]>
 	</select>
 	
 	<!-- 레시피 판매량 차트 -->
 	<select id="getSellRecipeChart" resultType="adrankSellRecipe">
 	 	<![CDATA[
 			SELECT rk.rank_no, rk.recipe_no, rk.recipe_nm, rk.recipe_sell_sum, od.order_ymd
			FROM rank_sell_recipe_ranking rk, order_info od
			WHERE rk.rank_ymd = curdate()
			GROUP BY recipe_no
			ORDER BY recipe_sell_sum DESC, rank_no
			LIMIT 10 OFFSET #{offset}
 		]]>
 	</select>
 	
 	<select id="getMonthTopSellRecipeChart" resultType="adrankSellRecipe">
 	 	<![CDATA[
 			SELECT oing.recipe_no, oing.recipe_nm, COUNT(oing.recipe_no) AS recipe_sell_sum, od.order_ymd
			FROM order_ingredient oing, order_info od
			WHERE oing.order_no = od.order_no
			  AND od.order_ymd
				  BETWEEN (SELECT LAST_DAY(#{order_ymd} -INTERVAL 1 MONTH)+ INTERVAL 1 day FROM DUAL)
				  AND (SELECT LAST_DAY(#{order_ymd})FROM DUAL)
			GROUP BY oing.recipe_no
			ORDER BY recipe_sell_sum DESC, oing.recipe_no
			LIMIT 10 
 		]]>
 	</select>
 	
 	<select id="getWeekTopSellRecipeChart" resultType="adrankSellRecipe">
 	 	<![CDATA[
 			SELECT oing.recipe_no, oing.recipe_nm, COUNT(oing.recipe_no) AS recipe_sell_sum, od.order_ymd
			FROM order_ingredient oing, order_info od
			WHERE oing.order_no = od.order_no
			 AND od.order_ymd
				  BETWEEN (SELECT DATE_FORMAT(DATE_SUB(#{order_ymd}, INTERVAL WEEKDAY(#{order_ymd}) DAY), '%Y-%m-%d'))
				  AND (SELECT DATE_FORMAT(DATE_ADD(#{order_ymd}, INTERVAL (6 - (WEEKDAY(#{order_ymd}))) DAY), '%Y-%m-%d'))
			GROUP BY oing.recipe_no
			ORDER BY recipe_sell_sum DESC, oing.recipe_no
			LIMIT 10 
 		]]>
 	</select>
 	
 	<select id="getDayTopSellRecipeChart" resultType="adrankSellRecipe">
 	 	<![CDATA[
 			SELECT oing.recipe_no, oing.recipe_nm, COUNT(oing.recipe_no) AS recipe_sell_sum, od.order_ymd
			FROM order_ingredient oing, order_info od
			WHERE oing.order_no = od.order_no 
			  AND DATE(od.order_ymd) = #{order_ymd}
			GROUP BY oing.recipe_no
			ORDER BY recipe_sell_sum DESC, oing.recipe_no
			LIMIT 10 
 		]]>
 	</select>
 	
 	<select id="getSellRecipeAgesChart" resultType="adrankSellRecipe">
 		<![CDATA[
 			SELECT CONCAT(FLOOR((YEAR(NOW())-YEAR(me.member_birth))/10)*10, '대') AS AGES, COUNT(me.member_birth) AS member_count
			FROM member me
				LEFT OUTER JOIN order_member od ON me.member_id = od.member_id
				LEFT OUTER JOIN order_ingredient oing ON od.order_no = oing.order_no
			WHERE oing.recipe_no = #{recipe_no}
			GROUP BY AGES
 		]]>
 	</select>
 
 </mapper>